; ===================================================================
; PlatformIO Configuration - Nano R4 Rotator System (From Scratch)
; ===================================================================
; Project: Distributed Rotator Controller
; Author: ON7KGK Michael
; Target: Arduino Nano R4 (Renesas RA4M1 Cortex-M4)
; Communication: RS485 between SHACK and ANTENNA units
; ===================================================================

[platformio]
default_envs = shack_unit

; ===================================================================
; Common settings for both units
; ===================================================================
[env]
platform = renesas-ra
framework = arduino
monitor_speed = 115200

; Build optimization
build_flags =
    -O2                         ; Optimization level 2
    -ffunction-sections
    -fdata-sections
    -fno-exceptions
    -fno-threadsafe-statics
    -Wall                       ; Enable all warnings
    -DARDUINO_NANO_R4

; Common libraries
lib_deps =
    adafruit/Adafruit MCP23017 Arduino Library@^2.3.2
    arduino-libraries/LiquidCrystal@^1.0.7
    Wire                        ; I2C (built-in)
    SPI                         ; SPI (built-in)

lib_ignore =
    TimerOne                    ; AVR only
    TimerFive                   ; AVR only
    RTClib                      ; AVR only

; ===================================================================
; SHACK UNIT - Master (Interface utilisateur)
; ===================================================================
[env:shack_unit]
board = uno_r4_minima           ; Use UNO R4 board def (same as Nano R4)

build_flags =
    ${env.build_flags}
    -DUNIT_TYPE=SHACK           ; Define unit type
    -DHAS_LCD_I2C=1
    -DHAS_MCP23017_SHACK=1
    -DRS485_MASTER=1
    -Isrc/shack_unit/include    ; Add include path

build_src_filter =
    -<*>                        ; Exclude everything
    +<shack_unit/>              ; Include only SHACK code

; SHACK specific libraries
lib_deps =
    ${env.lib_deps}
    marcoschwartz/LiquidCrystal_I2C@^1.1.4

; Upload settings
upload_speed = 115200
upload_port = /dev/cu.usbmodem*  ; Auto-detect (macOS)
; upload_port = COM*             ; Windows
; upload_port = /dev/ttyACM*     ; Linux

; ===================================================================
; ANTENNA UNIT - Slave (Contr√¥le moteurs + capteurs)
; ===================================================================
[env:antenna_unit]
board = uno_r4_minima

build_flags =
    ${env.build_flags}
    -DUNIT_TYPE=ANTENNA         ; Define unit type
    -DHAS_HH12_ENCODERS=1
    -DHAS_RELAY_MOTORS=1
    -DRS485_SLAVE=1
    -Isrc/antenna_unit/include  ; Add include path

build_src_filter =
    -<*>                        ; Exclude everything
    +<antenna_unit/>            ; Include only ANTENNA code

; ANTENNA specific libraries
lib_deps =
    ${env.lib_deps}

; Upload settings
upload_speed = 115200
upload_port = /dev/cu.usbmodem*  ; Auto-detect (macOS)

; ===================================================================
; Development & Debug
; ===================================================================
[env:shack_unit_debug]
extends = env:shack_unit
build_type = debug
build_flags =
    ${env:shack_unit.build_flags}
    -DDEBUG=1
    -g                          ; Debug symbols

[env:antenna_unit_debug]
extends = env:antenna_unit
build_type = debug
build_flags =
    ${env:antenna_unit.build_flags}
    -DDEBUG=1
    -g
